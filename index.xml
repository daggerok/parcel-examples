<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="4"?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>parcel-examples (0.0.1)</title>
<date>2018-07-16 19:25:51 UTC</date>
<author>
<personname>
<firstname>Maksim</firstname>
<surname>Kostromin</surname>
</personname>
<email>daggerok@gmail.com</email>
</author>
<authorinitials>MK</authorinitials>
<revhistory>
<revision>
<revnumber>0.0.1</revnumber>
<date>2018-07-16 19:25:51 UTC</date>
<authorinitials>MK</authorinitials>
</revision>
</revhistory>
</info>
<preface>
<title></title>
<simpara>Travis CI status:
<inlinemediaobject>
<imageobject>
<imagedata fileref="https://travis-ci.org/daggerok/parcel-examples.svg?branch=master"/>
</imageobject>
<textobject><phrase>Build Status</phrase></textobject>
</inlinemediaobject></simpara>
</preface>
<chapter xml:id="introduction">
<title>Introduction</title>
<simpara>Read <link xl:href="https://daggerok.github.io/parcel-examples">reference documentation</link></simpara>
<simpara>other repos with old examples:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://github.com/daggerok/parcel-vue-example">GitHub: daggerok/parcel-vue-example</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/daggerok/parcel-react-example">[GitHub: daggerok/parcel-react-example</link></simpara>
</listitem>
</itemizedlist>
<simpara>generated by <link xl:href="https://github.com/daggerok/generator-jvm/">generator-jvm</link> yeoman generator (java)</simpara>
</chapter>
<chapter xml:id="implementation">
<title>Implementation</title>
<section xml:id="basic-example">
<title>basic example</title>
<formalpara>
<title>prepare project</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">mkdir -p basic

echo "node_modules" &gt;&gt; basic/.gitignore
echo "dist" &gt;&gt; basic/.gitignore
echo ".cache" &gt;&gt; basic/.gitignore
echo '{"scripts":{"start":"parcel src/","build":"parcel build src/index.html"}}' &gt; basic/package.json

cd basic/
npm init -y
npm i -D parcel-bundler</programlisting>
</para>
</formalpara>
<formalpara>
<title>prepare project files</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">mkdir -p src
touch src/index.html
touch src/styles.css
touch src/main.js</programlisting>
</para>
</formalpara>
<formalpara>
<title>main.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">(function main() {
  'use strict';
  document.addEventListener('DOMContentLoaded', function onDOMContentLoaded() {
    document.querySelector('#app').innerHTML = '&lt;h1&gt;Hey! ðŸ“¦ ðŸš€&lt;/h1&gt;';
  }, false);
})();</programlisting>
</para>
</formalpara>
<formalpara>
<title>styles.css</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">html,
body {
  height: 100%;
}
body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial,
  sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
}
#app {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100%;
}
h1 {
  font-weight: 300;
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>index.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;!doctype html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta name="viewport"
        content="width=device-width, initial-scale=1.0"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;
  &lt;title&gt;Basic | Parcel&lt;/title&gt;
  &lt;link rel="shortcut icon" href="./favicon.ico" type="image/x-icon"&gt;
  &lt;link rel="stylesheet" href="./styles.css"&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="app"&gt;&lt;/div&gt;
  &lt;script src="./main.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</programlisting>
</para>
</formalpara>
<formalpara>
<title>start development</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">npm start</programlisting>
</para>
</formalpara>
<simpara>open <link xl:href="http://localhost:1234/">localhost:1234/</link></simpara>
<formalpara>
<title>build bundle</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">npm run build</programlisting>
</para>
</formalpara>
<formalpara>
<title>verify result</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">npm i -g serve
serve dist/</programlisting>
</para>
</formalpara>
<simpara>open <link xl:href="http://localhost:5000/">localhost:5000/</link></simpara>
</section>
<section xml:id="babel-stage-0">
<title>babel stage-0</title>
<simpara>parcel needed only .babelrc file and installed required presets</simpara>
<formalpara>
<title>add <literal>.babelrc</literal> file, install and configure presets: <literal>env</literal> and <literal>stage-0</literal></title>
<para>
<programlisting language="bash" linenumbering="unnumbered">cp -Rf basic babel-stage-0
cd babel-stage-0/
echo '{"presets":["env","stage-0"]}' &gt; .babelrc
npm i -D babel-preset-env babel-preset-stage-0</programlisting>
</para>
</formalpara>
<formalpara>
<title>now you can use some cool JS features:</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const obj = { ololo: 'trololo' };

document.querySelector('#app').textContent = JSON.stringify({
  ...obj,
  hey: 'ho!',
});</programlisting>
</para>
</formalpara>
<simpara>done.</simpara>
</section>
<section xml:id="react">
<title>react</title>
<formalpara>
<title>for React you need even less: just install react library and parcel will recognize everything for you!</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">cp -Rf babel-stage-0 react
cd react/
npm i -S react react-dom
npm i -D babel-preset-react
echo '{"presets":["env","react"]}' &gt; .babelrc</programlisting>
</para>
</formalpara>
<formalpara>
<title>add react component:</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import React, { Component } from 'react';

export class EchoEhlo extends Component {
  constructor() {
    super();
    this.state = {
      message: 'Hey!',
    };
    this.toggle = this.toggle.bind(this);
  }
  toggle() {
    this.setState({
      message: this.state.message.split('').reverse().join(''),
    })
  }
  render() {
    return &lt;h1 onClick={this.toggle}&gt;
      {this.state.message} ðŸ“¦ ðŸš€
    &lt;/h1&gt;
  }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>and update code in <literal>src/main.js</literal> file:</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import React from 'react';
import { render } from 'react-dom';
import { EchoEhlo } from './components/echo-ehlo';

render(
  &lt;EchoEhlo/&gt;,
  document.querySelector('#app')
);</programlisting>
</para>
</formalpara>
<simpara>build, run, verify&#8230;&#8203;</simpara>
<simpara>done.</simpara>
</section>
<section xml:id="preact">
<title>preact</title>
<formalpara>
<title>do necessary updates from react example:</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">cp -Rf react preact
cd preact/

npm rm react react-dom babel-preset-react

npm i -S preact preact-compat
npm i -D babel-preset-preact babel-plugin-transform-class-properties

echo '{"presets":["env","preact"],"plugins":["transform-class-properties"]}' &gt; .babelrc</programlisting>
</para>
</formalpara>
<formalpara>
<title>implement preact component:</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import { h, Component } from 'preact';

export /* don't works without default O.o */ default class EchoEhlo extends Component {
  state = { message: 'Hey!' };
  toggle = () =&gt; {
    const curr = this.state.message;
    const reverced = curr.split('').reverse().join('');
    this.setState({ message: reverced, });
  };
  render({}, { message }, {}) {
    return &lt;h1 onClick={this.toggle}&gt;
      {message} ðŸ“¦ ðŸš€
    &lt;/h1&gt;
  }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>update entry point:</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import { h, render } from 'preact';
import HeloEhlo from './components/echo-ehlo';

render(
  &lt;HeloEhlo/&gt;,
  document.querySelector('#app')
);</programlisting>
</para>
</formalpara>
<simpara>done.</simpara>
</section>
<section xml:id="vue">
<title>vue</title>
<formalpara>
<title>to be able build vue apps, in addition to babel example you only need install vue and two dev packages:</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">cp -Rf babel-stage-0 vue
cd vue/
npm i -S vue
npm i -D babel-preset-vue @vue/component-compiler-utils vue-template-compiler
echo '{"presets":["env","vue"]}' &gt; .babelrc</programlisting>
</para>
</formalpara>
<formalpara>
<title>add vue component file: <literal>App.vue</literal></title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;template lang="html"&gt;
  &lt;div id="app"&gt;
    &lt;h1&gt;Hey! ðŸ“¦ ðŸš€&lt;/h1&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
  export default {
    name: 'app'
  }
&lt;/script&gt;

&lt;style lang="css"&gt;
  html,
  body {
    height: 100%;
  }
  body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial,
    sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
  }
  #app {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
  }
  h1 {
    font-weight: 300;
  }
&lt;/style&gt;</programlisting>
</para>
</formalpara>
<formalpara>
<title>main.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import Vue from 'vue'
import App from './components/App.vue'

new Vue({
  el: '#app',
  render: h =&gt; h(App)
});</programlisting>
</para>
</formalpara>
</section>
<section xml:id="yaml">
<title>yaml</title>
<formalpara>
<title>to be able to parse YAML we need js-yaml package:</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">cp -Rf basic yaml
cd yaml/
npm i -ES js-yaml</programlisting>
</para>
</formalpara>
<formalpara>
<title>add YAML file:</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">app:
  map:
    key: value
  list:
  - value 1
  - value 2</programlisting>
</para>
</formalpara>
<formalpara>
<title>main.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import app from './app.yaml';

document.addEventListener('DOMContentLoaded', function onDOMContentLoaded() {
  document.querySelector('#app').innerHTML = `
    &lt;h1&gt;Hey! ðŸ“¦ ðŸš€&lt;/h1&gt;
    &lt;pre&gt;${JSON.stringify(app, null, 2)}&lt;/pre&gt;
  `;
}, false);</programlisting>
</para>
</formalpara>
</section>
<section xml:id="markdown">
<title>markdown</title>
<formalpara>
<title>to be able to parse YAML we need parcel-plugin-markdown package:</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">cp -Rf basic markdown
cd markdown/
npm i -ED parcel-plugin-markdown</programlisting>
</para>
</formalpara>
<formalpara>
<title>add <literal>app.md</literal> file:</title>
<para>
<programlisting language="markdown" linenumbering="unnumbered"># app

## ololo

**ololo article**

list:

- one
- two
- three

## trolololololo

    _O_
     |
    / \

## js

&lt;!--

---
title: JavaSCript Article'
metadata:
  ololo: trololo
---

--&gt;

### JS article

js, ololo, trololo, javascript, olololo ololo, trololo, olololo ololo, trololo, olololo ololo,
trololo, olololo, js, ololo, trololo, olololo, js ololo, trololo, olololo.....

```javascript
function ololo(arg) {
  arg = arg || 'trololo';
  console.log('ololo', arg);
}
```</programlisting>
</para>
</formalpara>
<formalpara>
<title>main.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import app from'./app.md';

document.addEventListener('DOMContentLoaded', function onDOMContentLoaded() {
  document.querySelector('#app').innerHTML = `
    &lt;h1&gt;Hey! ðŸ“¦ ðŸš€&lt;/h1&gt;
    &lt;div&gt;${app}&lt;/div&gt;
  `;
}, false);</programlisting>
</para>
</formalpara>
<note>
<simpara>See also <literal>markdowns</literal> and <literal>markdowns2</literal> projects for non single md-file parsing use case&#8230;&#8203;</simpara>
</note>
</section>
<section xml:id="markdowns-2">
<title>markdowns (2)</title>
<simpara>example how we can handle lazy loading with parcel for markdown files lazy processing on runtime</simpara>
<formalpara>
<title>add <literal>./src/posts</literal> folder with some posts in markdown format:</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">tree markdowns2/src/posts/
markdowns2/src/posts/
â””â”€â”€ 2018
    â””â”€â”€ 06
        â”œâ”€â”€ 29
        â”‚Â Â  â”œâ”€â”€ 01-ololo.md
        â”‚Â Â  â””â”€â”€ 02-trololo.md
        â””â”€â”€ 30
            â”œâ”€â”€ 01-javascript.md
            â””â”€â”€ 02-bash.md</programlisting>
</para>
</formalpara>
<formalpara>
<title><literal>main.js</literal> implementation:</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import marked from 'marked';

const years = require('./posts/**/*.md');

Object.keys(years).map(year =&gt; {
  const months = years[year];
  Object.keys(months).map(month =&gt; {
    const days = months[month];
    Object.keys(days).map(day =&gt; {
      const posts = days[day];
      Object.keys(posts)
        .map(src =&gt; posts[src])
        .forEach(uri =&gt; fetch(uri)
          .then(resp =&gt; resp.text())
          .then(markdown =&gt; marked(markdown))
          .then(html =&gt; document.querySelector('#app').innerHTML += html));
    });
  });
});</programlisting>
</para>
</formalpara>
</section>
<section xml:id="angularjs">
<title>angularjs</title>
<simpara>with no comments - I tired&#8230;&#8203;.</simpara>
<formalpara>
<title><literal>./src/index.html</literal></title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;!doctype html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta name="viewport"
        content="width=device-width, initial-scale=1.0"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;
  &lt;title&gt;AngularJS | Parcel&lt;/title&gt;
  &lt;link rel="shortcut icon" href="./favicon.ico" type="image/x-icon"&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;app&gt; loading...&lt;/app&gt;
&lt;script src="./main.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</programlisting>
</para>
</formalpara>
<formalpara>
<title>Main application bootstrap entrypoint: <literal>./src/main.js</literal></title>
<para>
<programlisting language="js" linenumbering="unnumbered">import 'angular/angular-csp.css';
import './styles.css';
//
import angular from 'angular';
import applicationModule from './app';

angular.bootstrap(document, [applicationModule.name], {
  strictDi: true, // data-ng-strict-di=""
  cloak: true,    // data-ng-cloak=""
});</programlisting>
</para>
</formalpara>
<formalpara>
<title>Application module config: <literal>./src/app/index.js</literal></title>
<para>
<programlisting language="js" linenumbering="unnumbered">/**
 * Application module configuration.
 */

import angular from 'angular';
import uiRouter from 'angular-ui-router';
//
import ComponentsModule from './components';

const applicationModule = angular.module('application.module', [
  uiRouter,
  ComponentsModule.name,
]);

const Config = ($urlRouterProvider, $locationProvider) =&gt; {
  $urlRouterProvider.otherwise('/');
  $locationProvider.hashPrefix('!');
};

applicationModule.config(['$urlRouterProvider', '$locationProvider', Config]);

export default applicationModule;</programlisting>
</para>
</formalpara>
<formalpara>
<title>Components module config: <literal>./src/app/components/index.js</literal></title>
<para>
<programlisting language="js" linenumbering="unnumbered">/**
 * Components module configuration.
 */

import angular from 'angular';
//
import AppComponentModule from './app';

const componentsModule = angular
  .module('components.module', [
    AppComponentModule.name,
  ]);

export default componentsModule;</programlisting>
</para>
</formalpara>
<formalpara>
<title>App module config: <literal>./src/app/components/app/index.js</literal></title>
<para>
<programlisting language="js" linenumbering="unnumbered">/**
 * App component module configuration.
 */

import angular from 'angular';
import uiRouter from 'angular-ui-router';
//
import Config from './config.js';
import Component from './component.js';

const appComponentModule = angular
  .module('app.component.module', [uiRouter])
  .component('app', Component)
  .config(['$stateProvider', Config]);

export default appComponentModule;</programlisting>
</para>
</formalpara>
<formalpara>
<title>App component config: <literal>./src/app/components/app/config.js</literal></title>
<para>
<programlisting language="js" linenumbering="unnumbered">export default ($stateProvider) =&gt; $stateProvider.state({
  url: '/',
  name: 'app',
  template: `&lt;app&gt;&lt;/app&gt;`,
});</programlisting>
</para>
</formalpara>
<formalpara>
<title>App component: <literal>./src/app/components/app/component.js</literal></title>
<para>
<programlisting language="js" linenumbering="unnumbered">import Controller from './controller.js';

export default {
  controller: Controller,
  template: `
    &lt;header ng-click="$ctrl.toggleGreeting()"&gt;header&lt;/header&gt;

    &lt;div class="container-fluid"&gt;
      &lt;div class="row"&gt;{{ $ctrl.greeting }}&lt;/div&gt;
    &lt;/div&gt;

    &lt;footer&gt;footer&lt;/footer&gt;
  `,
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>App component controller: <literal>./src/app/components/app/controller.js</literal></title>
<para>
<programlisting language="js" linenumbering="unnumbered">export default class Controller {
  constructor() {
    this.$ctrl = this;
  }

  $onInit() {
    this.greeting = this.first = 'hi';
    this.second = 'yay!';
  }

  toggleGreeting() {
    this.greeting = this.greeting === this.first
      ? this.second
      : this.first;
  }
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="react-bootstrap-4">
<title>react + bootstrap (4)</title>
<formalpara>
<title>prepare</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">cp -Rf react react-bootstrap
cd react-bootstrap/
npm i -S bootstrap
npm i -ED babel-preset-env babel-preset-react babel-preset-stage-0</programlisting>
</para>
</formalpara>
<formalpara>
<title>file <literal>.babelrc</literal></title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  "presets": [
    ["env", {
      "targets": {
        "browsers": ["last 2 versions", "safari &gt;= 7"]
      }
    }],
    "react",
    "stage-0"
  ]
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>add bootstrap import and add some bootstrap class for styling:</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import 'bootstrap/dist/css/bootstrap.css';

import React, { Component } from 'react';

export class EchoEhlo extends Component {
  constructor() {
    super();
    this.state = {
      message: 'Hey!',
    };
    this.toggle = this.toggle.bind(this);
  }
  toggle() {
    this.setState({
      message: this.state.message.split('').reverse().join(''),
    })
  }
  render() {
    return &lt;h1 onClick={this.toggle} className='alert-heading'&gt;
      {this.state.message} ðŸ“¦ ðŸš€
    &lt;/h1&gt;
  }
}</programlisting>
</para>
</formalpara>
<simpara>done.</simpara>
</section>
</chapter>
<chapter xml:id="links">
<title>Links</title>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://parceljs.org/">parcel</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/parcel-bundler/examples">parcel examples</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://reactjs.org/">react</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://preactjs.com/">preact</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://vuejs.org/">vue</link></simpara>
</listitem>
</itemizedlist>
<simpara><?asciidoc-hr?></simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://github.com/parcel-bundler/awesome-parcel">GitHub: parcel-bundler/awesome-parcel</link></simpara>
</listitem>
</itemizedlist>
<simpara><?asciidoc-hr?></simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://github.com/daggerok/parcel-examples">GitHub repo</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://daggerok.github.io/parcel-examples">GitHub pages</link></simpara>
</listitem>
</itemizedlist>
</chapter>
</book>